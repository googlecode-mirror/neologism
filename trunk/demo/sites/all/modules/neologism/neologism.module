<?php

/**
 * Neologism Module
 * Allows users to easily publish their own vocabulary online
 */

define("NEOLOGISM", "neologism");
define("HTML", "html");
define("RDF", "rdf");
define("N3", "n3");
define("XML", "xml");
define("RDFAPI_INCLUDE_DIR", drupal_get_path('module', 'neologism') ."/includes/rap/");
define("CONTENT_NEGOTATION_DIR", drupal_get_path('module', 'neologism') ."/includes/content_negotiation/");
define("NEOLOGISM_CT_VOCABULARY", "neo_vocabulary");
define("NEOLOGISM_CT_CLASS", "neo_class");
define("NEOLOGISM_CT_PROPERTY", "neo_property");

/**
 * Implementation of hook_perm().
 */
function neologism_perm() {
    return array('edit neologism');
}

/**
 * Implementation of hook_enable().
 */
function neologism_enable () {
  include_once drupal_get_path('module', 'neologism') .'/neologism.install';
  _neologism_install_create_content(_neologism_content_vocabulary());
  _neologism_install_create_content(_neologism_content_class());
  _neologism_install_create_content(_neologism_content_property());
}

/**
 * Implementation of hook_menu().
 */
function neologism_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => NEOLOGISM,
      'title' => t('Neologism Vocabularies'),
      'description' => t("Show a list of vocabularies."),
      'callback' => 'neologism_view_index',
      'access' => TRUE,
      'type' => MENU_LOCAL_TASK,
      );
  }
  else {
    // Add the CSS for this module
    // We put this in !$may_cache so it's only added once per request
    drupal_add_css(drupal_get_path('module', NEOLOGISM) .'/neologism.css');

    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      // We only display the export tabs on the vocabulary node.
      if ($node->nid && $node->type == NEOLOGISM_CT_VOCABULARY) {
        $items[] = array(
            'path' => 'node/'. arg(1) .'/' . HTML,
            'title' => t('View HTML'),
            'callback' => 'neologism_export_html',
            'callback arguments' => array($node),
            'type' => MENU_LOCAL_TASK,
        );
        $items[] = array(
            'path' => 'node/'. arg(1) .'/' . RDF,
            'title' => t('View RDF/XML'),
            'callback' => 'neologism_export_rdf',
            'callback arguments' => array($node),
            'type' => MENU_LOCAL_TASK,
        );
        $items[] = array(
            'path' => 'node/'. arg(1) .'/n3',
            'title' => t('View N3'),
            'callback' => 'neologism_export_n3',
            'callback arguments' => array($node),
            'type' => MENU_LOCAL_TASK,
        );
        $items[] = array(
            'path' => 'node/'. arg(1) .'/' . XML,
            'title' => t('View XML'),
            'callback' => 'neologism_export_xml',
            'callback arguments' => array($node),
            'type' => MENU_CALLBACK,
        );
        $items[] = array(
            'path' => 'node/'. arg(1) .'/layout',
            'title' => t('Diagram Layout'),
            'callback' => 'neologism_layout',
            'callback arguments' => array($node),
            'type' => MENU_CALLBACK,
        );
        $items[] = array(
            'path' => 'node/'. arg(1) .'/image',
            'title' => t('Diagram Image'),
            'callback' => 'neologism_image',
            'callback arguments' => array($node),
            'type' => MENU_CALLBACK,
        );
        $items[] = array(
            'path' => 'node/'. arg(1) .'/diagram',
            'title' => t('Overview Diagram'),
            'callback' => 'neologism_show_diagram',
            'callback arguments' => array($node),
            'type' => MENU_LOCAL_TASK,
        );
      }
      // Display a tab 'Vocabulary' on the class and property nodes to allow users to switch easily to the vocabulary
      if ($node->nid && ($node->type == NEOLOGISM_CT_CLASS || $node->type == NEOLOGISM_CT_PROPERTY) && isset($node->field_vocabulary[0]['nid'])) {
        $vocabulary_nid = $node->field_vocabulary[0]['nid'];
        $items[] = array(
            'path' => 'node/'. arg(1) .'/vocabulary',
            'title' => t('Vocabulary'),
            'callback' => 'drupal_goto',
            'callback arguments' => 'node/'.$vocabulary_nid,
            'type' => MENU_LOCAL_TASK,
        );
      }
    }

  }

  return $items;
}

/**
 * Output the HTML version of the vocabulary specified as input.
 */
function neologism_export_html($node) {

    $classes = get_all_classes($node);
    $properties = get_all_properties($node);

    //var_dump($node);

    $output = '';
    drupal_set_title('Vocabulary '. $node->title);

    // Last update date         
    $output .= '<div id="last_update" class="neologism field"><div class="field-label-inline-first">Last update:&nbsp;</div> ' . format_date($node->changed, 'large') . ' </div>';

    // Authors TODO: loop among the author to display their name
    $first_class = '-first';
    $output .= '<div class="field field-type-nodereference field-field-disjointwith">';
    $output .= '<div class="field-items">';


    foreach($node->field_authors as $author) {
      $author = user_load($author);
      //var_dump($author);
      $output .= '<div class="field-item"><div class="field-label-inline'. $first_class .'">Authors:&nbsp;</div>';
      $output .= l($author->name, 'user/'. $author->uid);
      $output .= '</div>';
      $first_class = '';      
    }
    
    // Abstract
    $output .= '<div id="abstract" class="neologism field"><div class="field-label-inline-first">Abstract:&nbsp;</div> ' . $node->field_abstract[0]['value'] . ' </div>';

    // Free text (body)
    $output .= '<p id="last_update" class="neologism">' . $node->body . ' </p>';

    // Links to add term to the vocabulary. TODO: manage the multi vocabulary situation, and create a /parent path
    if (user_access('edit neologism')) {
      $output .= '<p id="add_terms_link" class="neologism">' . l('Add class', 'node/add/'.NEOLOGISM_CT_CLASS, array(), "v=$node->nid") .' '. l('Add property', 'node/add/'.NEOLOGISM_CT_PROPERTY, array(), "v=$node->nid") . ' </p>';
    }
    
    //Vocabulary at glance
    $output .= '<h2 id="sec_glance" class="neologism">' . $node->title . ' at a glance</h2>';
    $output .= '<div id="atglance">';

  // Display the Classes
  if ($classes) {
      $output .= '<p><strong>Classes:</strong> ';
      foreach ($classes as $class) {
          $output .= '<a href="#' . $class['title'] . '" title="class ' . $node->title . ':'. $class['title'] . '">' . $class['title'] . '</a> | ';
      }
      $output .= '</p>';
  }

  // Display the Properties
  if ($properties) {
      $output .= '<p><strong>Properties:</strong> ';
      foreach ($properties as $property) {
          $output .= '<a href="#' . $property['title'] . '" title="property ' . $node->title . ':'. $property['title'] . '">' . $property['title'] . '</a> | ';
      }
      $output .= '</p>';
  }
    $output .= '</div>';

    //Display complete reference
    $output .= '<h2 id="sec_reference" class="neologism">' . $node->title . ' classes and properties</h2>';
  if ($classes) {
      foreach ($classes as $class) {
          $output .= node_view(node_load($class['id']), 1, $node->title);
      }
  }
  if ($properties) {
      foreach ($properties as $property) {
          $output .= node_view(node_load($property['id']), 1, $node->title);
      }
    }
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
    return $output;
}

/**
 * Output the RDF model of the vocabulary specified as input
 * using RAP (RDF API for PHP)
 * seeAlso http://www4.wiwiss.fu-berlin.de/bizer/rdfapi/
 */
function neologism_get_rdf_model($node, $uri, $document) {
    
    include(RDFAPI_INCLUDE_DIR . "RdfAPI.php");

    $ns = array(
                "rdf" => "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                "rdfs" => "http://www.w3.org/2000/01/rdf-schema#",
                "owl" => "http://www.w3.org/2002/07/owl#",
                "dc" => "http://purl.org/dc/elements/1.1/",
                "foaf" => "http://xmlns.com/foaf/0.1/"
               );

    $model = ModelFactory::getDefaultModel();
    $model->addNamespace($node->title, $uri);
    $model->addNamespace("foaf", $ns["foaf"]);

    //export the ontology
    $ontology = new Resource($uri);
    $doc = new Resource($document);
    $model->add(new Statement($doc, new Resource($ns["rdf"], "type"), new Resource($ns["foaf"], "Document")));
    $model->add(new Statement($doc, new Resource($ns["rdfs"], "label"), new Literal(($node->title)." ontology's document")));
    $model->add(new Statement($doc, new Resource($ns["foaf"], "primaryTopic"), $ontology));
    $model->add(new Statement($ontology, new Resource($ns["rdf"], "type"), new Resource($ns["owl"], "Ontology")));
    $model->add(new Statement($ontology, new Resource($ns["dc"], "title"), new Literal($node->title)));

    //export all classes
    $classes = get_all_classes($node);
    foreach ($classes as $oneclass) {
        $classresource = new Resource($uri . $oneclass["title"]);
        $model->add(new Statement($classresource, new Resource($ns["rdf"], "type"), new Resource($ns["rdfs"], "Class")));
        $model->add(new Statement($classresource, new Resource($ns["rdfs"], "isDefinedBy"), $ontology));
        $model->add(new Statement($classresource, new Resource($ns["rdfs"], "label"), new Literal($oneclass["label"])));
        if ($oneclass["comment_rdfs"] != NULL)
            $model->add(new Statement($classresource, new Resource($ns["rdfs"], "comment"), new Literal($oneclass["comment_rdfs"])));
        if ($oneclass["subclass"] != NULL)
            $model->add(new Statement($classresource, new Resource($ns["rdfs"], "subClassOf"), new Resource($uri.$oneclass["subclass"])));
        if ($oneclass["disjoint"] != NULL)
            $model->add(new Statement($classresource, new Resource($ns["owl"], "disjointWith"), new Resource($uri.$oneclass["disjoint"]))); 
		
		// if ($oneclass["superclassOf"] != NULL) {
            // $model->add(new Statement(new Resource($uri.$oneclass["superclassOf"]), new Resource($ns["rdfs"], "subClassOf"), $classresource));
			//}
    }

    //export all properties
    $properties = get_all_properties($node);
    foreach ($properties as $oneprop) {
        $propresource = new Resource($uri . $oneprop["title"]);
        $model->add(new Statement($propresource, new Resource($ns["rdf"], "type"), new Resource($ns["rdf"], "Property")));
		if ($oneprop["ifp"] == true) {
			$ifp_uri="http://www.w3.org/2002/07/owl#InverseFunctionalProperty";
            $model->add(new Statement($propresource, new Resource($ns["rdf"], "type"), new Resource($ifp_uri))); 	}
		if ($oneprop["fp"] == true) {
			$ifp_uri="http://www.w3.org/2002/07/owl#FunctionalProperty";
            $model->add(new Statement($propresource, new Resource($ns["rdf"], "type"), new Resource($ifp_uri))); 	}
        $model->add(new Statement($propresource, new Resource($ns["rdfs"], "isDefinedBy"), $ontology));
        $model->add(new Statement($propresource, new Resource($ns["rdfs"], "label"), new Literal($oneprop["label"])));
        if ($oneprop["comment_rdfs"] != NULL)
            $model->add(new Statement($propresource, new Resource($ns["rdfs"], "comment"), new Literal($oneprop["comment_rdfs"])));
        if ($oneprop["domain"] != NULL)
            $model->add(new Statement($propresource, new Resource($ns["rdfs"], "domain"), new Resource($uri, $oneprop["domain"])));
        if ($oneprop["range"] != NULL)
            $model->add(new Statement($propresource, new Resource($ns["rdfs"], "range"), new Resource($uri, $oneprop["range"])));
        if ($oneprop["subproperty"] != NULL)
            $model->add(new Statement($propresource, new Resource($ns["rdfs"], "subPropertyOf"), new Resource($uri, $oneprop["subproperty"])));
        if ($oneprop["inverse"] != NULL)
            $model->add(new Statement($propresource, new Resource($ns["owl"], "inverseOf"), new Resource($uri.$oneprop["inverse"])));
    }
    
    return $model;
}

/**
 * Output the RDF/XML version of the vocabulary specified as input
 */
function neologism_export_rdf($node) {
    
    include(RDFAPI_INCLUDE_DIR . "RdfAPI.php");
    include(RDFAPI_INCLUDE_DIR . "syntax/RdfSerializer.php");

    $request_uri = "http://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];
    $ontology = substr($request_uri, 0, strlen($request_uri)-4) . "#";
    $model = neologism_get_rdf_model($node, $ontology, $request_uri);
    $ser = new RDFSerializer();
    $rdf =& $ser->serialize($model);
    $model->close();

    header("Content-Type: application/rdf+xml; charset=utf-8");
    echo $rdf;

    return;
}

/**
 * Output the N3 version of the vocabulary specified as input
 */
function neologism_export_n3($node) {
    
    include(RDFAPI_INCLUDE_DIR . "RdfAPI.php");
    include(RDFAPI_INCLUDE_DIR . "syntax/N3Serializer.php");

    $request_uri = "http://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];
    $ontology = substr($request_uri, 0, strlen($request_uri)-3) . "#";
    $model = neologism_get_rdf_model($node, $ontology, $request_uri);
    $ser = new N3Serializer();
    $n3 =& $ser->serialize($model);
    $model->close();

    header("Content-Type: text/rdf+n3; charset=utf-8");
    echo $n3;

    return;
}

/**
 * Output the XML version of the vocabulary specified as input
 * using simpleXML
 * seeAlso http://www.php.net/simplexml
 */
function neologism_export_xml($node) {
    $xml = simplexml_load_string('<vocabulary/>');

    //export all classes
    $classes = get_all_classes($node);
    $classesNode = $xml->addChild("classes");
    foreach ($classes as $oneclass) {
        $class = $classesNode->addChild("rdfclass");
        $class->addAttribute("name", $oneclass["title"]);
        $class->addAttribute("label", $oneclass["label"]);
        if ($oneclass["subclass"] != NULL)
            $class->addAttribute("subclass", $oneclass["subclass"]);
		// if ($oneclass["superclassOf"] != NULL)
            // $class->addAttribute("superclassOf", $oneclass["superclassOf"]);
		// TODO also show IFPs/FPs in a special way?
    }

    //export all properties
    $properties = get_all_properties($node);
    $propNode = $xml->addChild("properties");
    foreach ($properties as $oneprop) {
        $prop = $propNode->addChild("rdfproperty");
        $prop->addAttribute("name", $oneprop["title"]);
        $prop->addAttribute("label", $oneprop["label"]);
        if ($oneprop["domain"]) $prop->addAttribute("domain", $oneprop["domain"]);
        if ($oneprop["range"]) $prop->addAttribute("range", $oneprop["range"]);
    }

    header("Content-Type: application/xml; charset=utf-8");
    echo $xml->asXml();
    return;
}

/**
 * Layout of the vocabulary using REST
 */
function neologism_layout($node) {
    $name = $node->title;
    $layout = $_POST['layout'];
    if ($layout) {
        //POST, so write layout
        neologism_write_layout($node, $layout);
    } else {
        //GET, so read it
        $layout = neologism_get_layout($node);
        if ($layout == NULL)
            $layout = neologism_generate_layout($node);
        header("Content-Type: application/xml; charset=utf-8");
        echo $layout;
        return;
    }
}

/**
 * Get layout of the vocabulary
 */
function neologism_get_layout($node) {
	$query = "SELECT field_layout_value FROM content_type_".NEOLOGISM_CT_VOCABULARY." WHERE nid = " . $node->nid;
    $result = db_fetch_array(db_query($query));
    $layout = $result[field_layout_value];
    return $layout;
}

/**
 * Generate a random layout
 */
function neologism_generate_layout($node) {
    $xml = simplexml_load_string('<layout/>');        
    $classes = get_all_classes($node);
    $y = 0;
    foreach ($classes as $oneclass) {
        //export all classes
        $y = $y + 50;
        $class = $xml->addChild("rdfclass");
        $class->addAttribute("name", $oneclass["title"]);
        $class->addAttribute("label", $oneclass["label"]);
        $class->addAttribute("x", "50");
        $class->addAttribute("y", $y);
        $class->addAttribute("width", "100");
        $class->addAttribute("height", "30");
    }
    return $xml->asXml();
}

/**
 * Layout of the vocabulary using REST
 *   - import by POST using a HTTP variable called 'layout'
 */
function neologism_write_layout($node, $layout) {
    $success = db_query("UPDATE content_type_".NEOLOGISM_CT_VOCABULARY." SET field_layout_value = '%s' WHERE nid = %d", $layout, $node->nid);
    if ($update)
        return "Layout stored";
    else
        return "An error occurred trying to store this layout";
}

/**
 * Read/write diagram image image
 */
function neologism_image($node) {
    $name = $node->title;
    $output = 'For the moment this feature is not available';
    return $output;
}

/**
 * Show the overview diagram
 */
function neologism_show_diagram($node) {

    $vocabulary = $node->title;
    $base = base_path();
    $swf = $base . drupal_get_path('module','neologism').'/includes/Neologism.swf';
    $img_legend = $base . drupal_get_path('module','neologism').'/includes/legend.png';
    $edit_mode = user_access('edit neologism') ? 1 : 0;
    $prefix = $base . NEOLOGISM .'/';
		
    $output = <<<EXCERPT

    <div id="flex_diagram">

        <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
            id="Neologism" width="800px" height="600px"
            codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab">
                <param name="movie" value="$swf" />
                <param name="quality" value="high" />
                <param name="bgcolor" value="#869ca7" />
                <param name='flashVars' value='vocabulary=$vocabulary&editMode=$edit_mode&prefix=$prefix'/>
                <param name="allowScriptAccess" value="sameDomain" />
                <embed src="$swf" quality="high" bgcolor="#869ca7"
                    width="800px" 
                    height="600px" 
                    name="Neologism" 
                    align="middle"
                    play="true"
                    loop="false"
                    quality="high"
                    allowScriptAccess="sameDomain"
                    type="application/x-shockwave-flash"
                    pluginspage="http://www.adobe.com/go/getflashplayer"
                    flashVars='vocabulary=$vocabulary&editMode=$edit_mode&prefix=$prefix'>
                </embed>
        </object>

        <img src="$img_legend" 
             alt="green arrows mean property, red inheritance"
             width="226" height="80" id="legend" />

    </div>

EXCERPT;

    return $output;
}

/**
 * Output a list of all the vocabularies present on the site.
 */
function neologism_view_index() {

  $result = pager_query(db_rewrite_sql('SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.type = "'.NEOLOGISM_CT_VOCABULARY.'" AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC'), variable_get('default_nodes_main', 10));

  if (db_num_rows($result)) {
    $output = '';
    while ($node = db_fetch_object($result)) {
      $output .= node_view(node_load($node->nid), 1);
    }
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }

  return $output;
}

/**
 * Implementation of hook_link().
 */
function neologism_link($type, $node = NULL, $teaser = FALSE) {
    $links = array();
    $vocabulary_nid = $node->field_vocabulary[0]['nid'];
    $destination = "destination=". drupal_urlencode("node/$vocabulary_nid");

    if (user_access('edit neologism') && $node->type == NEOLOGISM_CT_CLASS) {
      // Edit link only in the HTML output
      if ($teaser) {
        $links['neologism_edit_class'] = array(
          'title' => t('Edit'),
          'href' => "node/$node->nid/edit",
          'query' => $destination,
        );
      }
      $links['neologism_add_subclass'] = array(
        'title' => t('Add subclass'),
        'href' => "node/add/".NEOLOGISM_CT_CLASS."/parent/$node->nid"
      );
      $links['neologism_add_property'] = array(
        'title' => t('Add property'),
        'href' => "node/add/".NEOLOGISM_CT_PROPERTY."/classparent/$node->nid"
      );
    }

    if (user_access('edit neologism') && $node->type == NEOLOGISM_CT_PROPERTY) {
      // Edit link only in the HTML output
      if ($teaser) {
        $links['neologism_edit_property'] = array(
          'title' => t('Edit'),
          'href' => "node/$node->nid/edit",
          'query' => $destination,
        );
      }
      $links['neologism_add_subproperty'] = array(
        'title' => t('Add subproperty'),
        'href' => "node/add/".NEOLOGISM_CT_PROPERTY."/parent/$node->nid"
      );
    }

    return $links;
}

/**
 * Implementation of hook_form_alter().
 */
function neologism_form_alter($form_id, &$form) {
  // Select the parent class if provided in the url of type node/add/class/parent/9
  if ($form_id == NEOLOGISM_CT_CLASS.'_node_form' && arg(3) == 'parent' && isset($form['field_subclassof']['nids'])) {
    $form['field_subclassof']['nids']['#default_value'] = arg(4);
  }
  // Select the vocabulary when adding a class from a vocabulary page
  if ($form_id == NEOLOGISM_CT_CLASS.'_node_form' && isset($_GET['v']) && isset($form['field_vocabulary']['nids'])) {
    $vocabulary_id = (int)$_GET['v'];
    $form['field_vocabulary']['nids']['#default_value'][0] = $vocabulary_id;
  }

  // Select the domain of a property if provided in the url of type node/add/property/classparent/3
  if ($form_id == NEOLOGISM_CT_PROPERTY.'_node_form' && arg(3) == 'classparent' && isset($form['field_domain']['nids'])) {
    $form['field_domain']['nids']['#default_value'] = arg(4);
  }
  // Select the parent class if provided in the url of type node/add/property/parent/11
  if ($form_id == NEOLOGISM_CT_PROPERTY.'_node_form' && arg(3) == 'parent' && isset($form['field_subpropertyof']['nids'])) {
    $form['field_subpropertyof']['nids']['#default_value'] = arg(4);
  }
  // Select the vocabulary when adding a class from a vocabulary page
  if ($form_id == NEOLOGISM_CT_PROPERTY.'_node_form' && isset($_GET['v']) && isset($form['field_vocabulary']['nids'])) {
    $vocabulary_id = (int)$_GET['v'];
    $form['field_vocabulary']['nids']['#default_value'][0] = $vocabulary_id;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function neologism_nodeapi(&$node, $op, $teaser, $page) {
    if (module_exists('path')) {
        switch ($op) {

            case 'load': 
                            if ($node->type == NEOLOGISM_CT_VOCABULARY and arg(0) == TRUE and arg(1) == TRUE and arg(2) == FALSE) {
                                //vocabulary root, so content negotiation, provide an appropiate representation
                                $request_uri = $_SERVER["REQUEST_URI"];
                                $accept = $_SERVER["HTTP_ACCEPT"];
                                $redirect_uri = neologism_get_preferred_uri($request_uri, $accept);                         
                                header("HTTP/1.1 303");
                                header("Location: " . $redirect_uri);    
                            }
                            break;

            case 'insert':
                            // Create a user friendly path to the vocabulary node
                            if($node->type == NEOLOGISM_CT_VOCABULARY) {
                                path_set_alias("node/$node->nid", NEOLOGISM.'/'.check_plain($node->title));
                                path_set_alias("node/$node->nid/".HTML, NEOLOGISM.'/'.check_plain($node->title).'/' . HTML);        
                                path_set_alias("node/$node->nid/".RDF, NEOLOGISM.'/'.check_plain($node->title).'/' . RDF);
                                path_set_alias("node/$node->nid/n3", NEOLOGISM.'/'.check_plain($node->title).'/' . N3);
                                path_set_alias("node/$node->nid/".XML, NEOLOGISM.'/'.check_plain($node->title).'/' . XML);
                                path_set_alias("node/$node->nid/layout", NEOLOGISM.'/'.check_plain($node->title).'/layout');
                                path_set_alias("node/$node->nid/diagram", NEOLOGISM.'/'.check_plain($node->title).'/diagram');
                                path_set_alias("node/$node->nid/image", NEOLOGISM.'/'.check_plain($node->title).'/image');
                            }
                            break;

            case 'delete':
                            // Deletion of the path when deleting a vocabulary
                            if($node->type == NEOLOGISM_CT_VOCABULARY) {
                                path_set_alias("node/$node->nid");
                                path_set_alias("node/$node->nid/".HTML);
                                path_set_alias("node/$node->nid/".RDF);
                                path_set_alias("node/$node->nid/".N3);
                                path_set_alias("node/$node->nid/".XML);
                                path_set_alias("node/$node->nid/layout");
                                path_set_alias("node/$node->nid/diagram");
                                path_set_alias("node/$node->nid/image");
                            }
                            break;

            default:
                            break;

        }
    }
}

/**
 * Neologism export
 */
function neologism_export($type = 'html', $nid = 0) {
  $type = drupal_strtolower($type);
  $node_result = db_query(db_rewrite_sql('SELECT n.nid, n.title, b.parent FROM {node} n INNER JOIN {book} b ON n.vid = b.vid WHERE n.nid = %d'), $nid);
  if (db_num_rows($node_result) > 0) {
      $node = db_fetch_object($node_result);
  }
  $depth = count(book_location($node)) + 1;
  $export_function = 'book_export_'. $type;

  if (function_exists($export_function)) {
    print call_user_func($export_function, $nid, $depth);
  }
  else {
    drupal_set_message(t('Unknown export format.'));
    drupal_not_found();
  }
}

/**
 * Get all properties in a vocabulary 
 */
function get_all_properties($node, $domain='') {
  $properties_ids = db_query(db_rewrite_sql('SELECT n.nid, n.title FROM {content_field_vocabulary} c INNER JOIN {node} n ON c.nid = n.nid WHERE c.field_vocabulary_nid = %d AND n.type="'.NEOLOGISM_CT_PROPERTY.'" '), $node->nid);
  if ($domain)  {
  $domain_id = db_fetch_array(db_query(db_rewrite_sql('SELECT nid FROM {node} WHERE title = "%s" '), $domain));
  // $properties_ids = db_query(db_rewrite_sql('SELECT n.nid, n.title FROM {content_field_vocabulary} c INNER JOIN {node} n ON c.nid = n.nid INNER JOIN {content_type_'.NEOLOGISM_CT_PROPERTY.'} t ON c.nid=t.nid WHERE c.field_vocabulary_nid = %d AND n.type="'.NEOLOGISM_CT_PROPERTY.'" AND t.field_domain_nid ='.$domain_id[nid] ), $node->nid);
  $properties_ids = db_query(db_rewrite_sql('SELECT n.nid, n.title FROM {content_field_vocabulary} c INNER JOIN {node} n ON c.nid = n.nid INNER JOIN {content_type_'.NEOLOGISM_CT_PROPERTY.'} t ON c.nid=t.nid WHERE c.field_vocabulary_nid = %d AND n.type="'.NEOLOGISM_CT_PROPERTY.'" AND t.field_domain_nid = %d' ), $node->nid, $domain_id[nid]);
  }
  $i=0;
  while ($item = db_fetch_object($properties_ids)) {
  $properies_data[$i]['id']=$item->nid;
  $properies_data[$i]['title']=$item->title;
  
  $prop_stuff = db_fetch_array(db_query(db_rewrite_sql('SELECT field_range_nid, field_domain_nid, field_inverse_nid, field_subpropertyof_nid FROM {content_type_'.NEOLOGISM_CT_PROPERTY.'} WHERE nid = %d'), $item->nid));
  /*
  $stuff=db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid IN (%d,%d,%d) '), $prop_stuff[field_range_nid],$prop_stuff[field_domain_nid],$prop_stuff[field_inverse_nid]);
  var_dump($stuff);
  while ($stuff_item = db_fetch_array($stuff) ) {
     var_dump($stuff_item);
  } */
  $range = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d '), $prop_stuff[field_range_nid]));
  $properies_data[$i]['range']=$range[title];
  $domain = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d '), $prop_stuff[field_domain_nid]));
  $properies_data[$i]['domain']=$domain[title];
  $inverse = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d '), $prop_stuff[field_inverse_nid]));
  $properies_data[$i]['inverse']=$inverse[title];
  $subproperty = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d '), $prop_stuff[field_subpropertyof_nid]));
  $properies_data[$i]['subproperty']=$subproperty[title];
  
  $label = db_fetch_array(db_query(db_rewrite_sql('SELECT field_label_value FROM {content_field_label} WHERE nid = %d'), $item->nid));
  $properies_data[$i]['label']=$label[field_label_value];

// TODO fix the name of the field in the CCK definition to be consistent with the one used for classes
  $comment_rdfs = db_fetch_array(db_query(db_rewrite_sql('SELECT field_comment_value FROM {content_field_comment} WHERE nid = %d'), $item->nid));
  $properies_data[$i]['comment_rdfs']=$comment_rdfs[field_comment_value];
  
  $ifp_value = db_fetch_array(db_query(db_rewrite_sql('SELECT field_ifp_value FROM {content_type_'.NEOLOGISM_CT_PROPERTY.'} WHERE nid = %d'), $item->nid));
  $properies_data[$i]['ifp']=$ifp_value[field_ifp_value];
  $fp_value = db_fetch_array(db_query(db_rewrite_sql('SELECT field_fp_value FROM {content_type_'.NEOLOGISM_CT_PROPERTY.'} WHERE nid = %d'), $item->nid));
  $properies_data[$i]['fp']=$fp_value[field_fp_value];

  $i++;
  }
  // var_dump($properies_data);
  return $properies_data;
}

/**
 * Get all classes in a vocabulary
 */
function get_all_classes($node) {
  // $class_ids = db_query(db_rewrite_sql('SELECT nid FROM {content_field_vocabulary} WHERE field_vocabulary_nid = %d'), $node->nid);
  $class_ids = db_query(db_rewrite_sql('SELECT n.nid, n.title FROM {content_field_vocabulary} c INNER JOIN {node} n ON c.nid = n.nid WHERE c.field_vocabulary_nid = %d AND n.type="'.NEOLOGISM_CT_CLASS.'"'), $node->nid);
  // $class_ids = db_query(db_rewrite_sql('SELECT nid, field_subclassof_nid FROM {content_type_'.NEOLOGISM_CT_CLASS.'} WHERE field_vocabulary_nid = %d'), $node->nid);
  $i=0;
  
  while ($item = db_fetch_object($class_ids)) {
  $class_data[$i]['id']=$item->nid;
  $class_data[$i]['title']=$item->title;
  
  $disjoint_id = db_fetch_array(db_query(db_rewrite_sql('SELECT field_disjointwith_nid FROM {content_field_disjointwith} WHERE nid = %d'), $item->nid));
  $disjoint = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d'), $disjoint_id[field_disjointwith_nid]));
  $class_data[$i]['disjoint']=$disjoint[title];
  
  $subclass_id = db_fetch_array(db_query(db_rewrite_sql('SELECT field_subclassof_nid FROM {content_type_'.NEOLOGISM_CT_CLASS.'} WHERE nid = %d'), $item->nid));
  $subclass = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d'), $subclass_id[field_subclassof_nid]));
  $class_data[$i]['subclass']=$subclass[title];

  // $superclass_id = db_fetch_array(db_query(db_rewrite_sql('SELECT field_superclassof_nid FROM {content_type_'.NEOLOGISM_CT_CLASS.'} WHERE nid = %d'), $item->nid));
  // $superclass = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d'), $superclass_id[field_superclassof_nid]));
  // $class_data[$i]['superclassOf']=$superclass[title];
  
  $label = db_fetch_array(db_query(db_rewrite_sql('SELECT field_label_value FROM {content_field_label} WHERE nid = %d'), $item->nid));
  $class_data[$i]['label']=$label[field_label_value];
  
  $comment_rdfs = db_fetch_array(db_query(db_rewrite_sql('SELECT field_comment_value FROM {content_field_comment} WHERE nid = %d'), $item->nid));
  $class_data[$i]['comment_rdfs']=$comment_rdfs[field_comment_value];
    
  // $title = db_fetch_array(db_query(db_rewrite_sql('SELECT title FROM {node} WHERE nid = %d'), $item->nid));
  // $class_data[$i]['title']=$title[title];
  
  $i++;
  }
  // var_dump($class_data);
  return $class_data;
}

/**
 * Get the best content type requested
 */
function neologism_get_preferred_content($accept) {
    if (isset($accept)) {
        include(CONTENT_NEGOTATION_DIR . "content_negotiation.inc.php");
        $best = content_negotiation::mime_best_negotiation();
        if ($best == "application/rdf+xml")
            return RDF;
        else if ($best == "text/rdf+n3")
            return N3;
        else if ($best == "application/xml")
            return XML;
        else
            return HTML;
    } else {
        return RDF;
    }
}

/**
 * Get the best uri requested
 */
function neologism_get_preferred_uri($uri, $accept) {
    $uri = "http://" . $_SERVER["HTTP_HOST"] . $uri;
    $preferred = neologism_get_preferred_content($accept);
    if (substr($uri, -1)=="/")
        return $uri . $preferred;
    else
        return $uri . "/" . $preferred;
}

