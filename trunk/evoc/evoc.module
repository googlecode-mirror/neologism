<?php
// $Id: evoc.module, v2.0.0.0 2009/09/17 16:16:51 guidocecilio Exp $

define("EVOC_DISJOINTS", "disjoints");
define("EVOC_SUPERCLASSES", "superclasses");
define("EVOC_DOMAINS", "domains");
define("EVOC_RANGES", "ranges");
define("EVOC_SUPERPROPERTIES", "superproperties");
define("EVOC_INVERSES", "inverses");    // new form -- multiple inverses
define("EVOC_INVERSE", "inverse");      // old form -- one inverse

define("RDFAPI_INCLUDE_DIR", drupal_get_path('module', 'evoc') ."/includes/rap/");

/**
 * Implementation of hook_perm().
 */
function evoc_perm() {
  return array('manage external vocabularies');
}

/**
 * Implementation of hook_menu().
 */
function evoc_menu() {
  $items = array();
  $items['evoc'] = array(
    'title' => 'External vocabularies',
    'description' => 'Add and remove references to external RDF vocabularies.',
    'page callback' => 'evoc_manage_vocabularies',
    'access arguments' => array('manage external vocabularies'),
    'file' => 'evoc.admin.inc',
    'weight' => 6,
  );
  $items['evoc/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'evoc.admin.inc',
    'weight' => 1,
  );
  $items['evoc/add'] = array(
    'title' => 'Add new',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evoc_add_vocabulary'),
    'access arguments' => array('manage external vocabularies'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'evoc.admin.inc',
    'weight' => 2,
  );
  $items['evoc/remove/%'] = array(
    'title' => 'Remove external vocabulary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evoc_remove_confirm', 2),
    'access arguments' => array('manage external vocabularies'),
    'type' => MENU_CALLBACK,
    'file' => 'evoc.admin.inc',
  );
  return $items;
}

function evoc_import_vocabulary($uri, $prefix, $showdetails = false) {
  module_load_include('inc', 'evoc', 'evoc.load_vocab');
  try {
    $model = evoc_read_RDF_from_URI($uri);
    $vocabulary = evoc_get_vocabulary_description($model, $prefix, $uri);
    evoc_save_vocabulary($vocabulary, $showdetails);
  } catch (Exception $ex) {
    drupal_set_message($ex->getMessage(), 'error');
    exit();
  }
  drupal_set_message(t('External vocabulary %prefix (%uri) added.', array('%prefix' => $prefix, '%uri' => $uri)));
}

/**
 * This fucntion remove a namespace from the system
 * @param object $prefix namespace prefix
 * @return 
 */
function evoc_remove_vocabulary($prefix, $showdetails = false) {
  
  $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superclasses} where prefix="%s"'), $prefix);
  
  //$classes = db_query('select * from {evoc_rdf_superclasses}');
  $classes = db_query(db_rewrite_sql('select * from {evoc_rdf_superclasses} where superclass like "%s%"'), $prefix);
  // remove superclasses references
  while ( $class = db_fetch_object($classes) ) {
    $qname_parts = explode(':', $class->superclass);
    $p = $qname_parts[0];
    if( $p == $prefix ) {
      $c = db_fetch_object(db_query(db_rewrite_sql('select superclasses from {evoc_rdf_classes} where prefix="%s" and id="%s"'), $class->prefix, $class->reference));
      $result = db_query(db_rewrite_sql('update {evoc_rdf_classes} set superclasses = "%d" where prefix = "%s" and id = "%s"'), --$c->superclasses, $class->prefix, $class->reference);
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superclasses} where prefix="%s" and reference="%s" and superclass="%s"'), $class->prefix, $class->reference, $class->superclass);        
    }
  }
  
	// remove disjointwith dependencies
  $result = db_query(db_rewrite_sql('delete from {evoc_rdf_disjointwith} where prefix="%s"'), $prefix);
  $classes = db_query(db_rewrite_sql('select * from {evoc_rdf_disjointwith} where disjointwith like "%s%"'), $prefix);
  // remove superclasses references
  while ( $class = db_fetch_object($classes) ) {
    $qname_parts = explode(':', $class->disjointwith);
    $p = $qname_parts[0];
    if( $p == $prefix ) {
      $c = db_fetch_object(db_query(db_rewrite_sql('select ndisjointwith from {evoc_rdf_classes} where prefix="%s" and id="%s"'), $class->prefix, $class->reference));
      $result = db_query(db_rewrite_sql('update {evoc_rdf_classes} set ndisjointwith = "%d" where prefix = "%s" and id = "%s"'), --$c->ndisjointwith, $class->prefix, $class->reference);
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_disjointwith} where prefix="%s" and reference="%s" and disjointwith="%s"'), $class->prefix, $class->reference, $class->disjointwith);        
    }
  }
  
  $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesdomains} where prefix="%s"'), $prefix);
  //$domains = db_query('select * from {evoc_rdf_propertiesdomains}');
  $domains = db_query(db_rewrite_sql('select * from {evoc_rdf_propertiesdomains} where rdf_domain like "%s%"'), $prefix);
  // remove superclasses references
  while ( $object = db_fetch_object($domains) ) {
    $qname_parts = explode(':', $object->rdf_domain);
    $p = $qname_parts[0];
    if( $p == $prefix ) {
      $cp = db_fetch_object(db_query(db_rewrite_sql('select domains from {evoc_rdf_properties} where prefix="%s" and id="%s"'), $object->prefix, $object->reference));
      $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set domains = "%d" where prefix = "%s" and id = "%s"'), --$cp->domains, $object->prefix, $object->reference);
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesdomains} where prefix="%s" and reference="%s" and rdf_domain="%s"'), $object->prefix, $object->reference, $object->rdf_domain);        
    }
  }
  
  $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesranges} where prefix="%s"'), $prefix);
  //$ranges = db_query('select * from {evoc_rdf_propertiesranges}');
  $ranges = db_query(db_rewrite_sql('select * from {evoc_rdf_propertiesranges} where rdf_range like "%s%"'), $prefix);
  // remove superclasses references
  while ( $object = db_fetch_object($ranges) ) {
    $qname_parts = explode(':', $object->rdf_range);
    $p = $qname_parts[0];
    if( $p == $prefix ) {
      $cp = db_fetch_object(db_query(db_rewrite_sql('select ranges from {evoc_rdf_properties} where prefix="%s" and id="%s"'), $object->prefix, $object->reference));
      $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set ranges = "%d" where prefix = "%s" and id = "%s"'), --$cp->ranges, $object->prefix, $object->reference);
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesranges} where prefix="%s" and reference="%s" and rdf_range="%s"'), $object->prefix, $object->reference, $object->rdf_range);        
    }
  }
  // removing all the classes
  $result = db_query(db_rewrite_sql('delete from {evoc_rdf_classes} where prefix="%s"'), $prefix);
  
  // remove properties
  // removing all the references that could has a property
  $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superproperties} where prefix="%s"'), $prefix);
  //$properties = db_query('select * from {evoc_rdf_superproperties}');
  $properties = db_query(db_rewrite_sql('select * from {evoc_rdf_superproperties} where superproperty like "%s%"'), $prefix);
  // remove superclasses references
  while ( $property = db_fetch_object($properties) ) {
    $qname_parts = explode(':', $property->superproperty);
    $p = $qname_parts[0];
    if( $p == $prefix ) {
      $cp = db_fetch_object(db_query(db_rewrite_sql('select superproperties from {evoc_rdf_properties} where prefix="%s" and id="%s"'), $property->prefix, $property->reference));
      $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set superproperties = "%d" where prefix = "%s" and id = "%s"'), --$c->superproperty, $property->prefix, $property->reference);
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superproperties} where prefix="%s" and reference="%s" and superproperty="%s"'), $property->prefix, $property->reference, $property->superproperty);        
    }
  } 
  
  $result = db_query(db_rewrite_sql('delete from {evoc_rdf_properties} where prefix="%s"'), $prefix);
  
  
  // check in the database for the namespace
  $exists_namespace = db_result(db_query(db_rewrite_sql('select count(*) from {rdf_namespaces} where prefix = "%s"'), $prefix)) > 0; 
  if ( $exists_namespace ) {
    // we need to remove the namespaces from rdf_namespaces table
    $result = db_query("delete from {rdf_namespaces} where prefix = '%s'", $prefix);
    if( $result ) {
      if ($showdetails) {
        drupal_set_message( t( 'The namespace '.$prefix.' has been successfully removed from the system.') );
      }
    }
    else {
      if ($showdetails) {
        drupal_set_message( t( 'There is some problem removing the namespace '.$prefix.'.') );
      }
    }  
  }
  
  module_invoke_all('removed_external_vocabulary', $prefix);
}


/**
 * Saves a vocabulary array into the evoc database.
 * 
 * @param array $vocabulary
 * @param boolean $showdetails
 * @return 
 */
function evoc_save_vocabulary($vocabulary, $showdetails = false) {
  $prefix = $vocabulary['prefix'];
  $ns = $vocabulary['uri'];

  // Namespace management.
  db_query("INSERT INTO {rdf_namespaces} (prefix, uri) VALUES ('%s', '%s')", $prefix, $ns);

  // RDF terms management.
  foreach ($vocabulary['classes'] as $class) {
    evoc_write_class($class, $showdetails);
  }
  foreach ($vocabulary['properties'] as $property) {
    evoc_write_property($property, $showdetails);
  }
}

/**
 * Store an external RDF class in the database.
 * 
 * @param object $class it's a keyed array containing the class information to be added. 
 *               e.g: class = array('id' => 'someid', 'type' => 'class', 'label' => 'class label', 
 *                       'comment' => 'some comment', 'superclasses' => array('rdfs:Resource', 'sioc:Container'));  
 *          
 * @return 
 */
function evoc_write_class($class, $showdetails = false) {
  // Check whether this class is already in the system.
  $count = db_result(db_query(db_rewrite_sql('SELECT count(*) FROM {evoc_rdf_classes} WHERE prefix="%s" AND id = "%s"'), $class['prefix'], $class['id'])) > 0;
  if ($count) {
    drupal_set_message('Importing Class '.$class['prefix']." : ".$class['id']." already exists in the system.", 'status', FALSE);
  }
  else {
    $count_superclasses = 0;
    $superclasses = $class[EVOC_SUPERCLASSES];
    if( !empty($superclasses) && is_array($superclasses) ) {
      $count_superclasses = count($superclasses);
      foreach ( $superclasses as $superclass ) {
        if( !empty($superclass) ) {
          db_query(db_rewrite_sql('insert into {evoc_rdf_superclasses} (prefix, reference, superclass) values ("%s", "%s", "%s")'), $class['prefix'], $class['id'], $superclass);
        }
      }
    }
    
  	$count_disjointwith = 0;
  	$disjointwith_array = $class[EVOC_DISJOINTS];
    if( !empty($disjointwith_array) && is_array($disjointwith_array) ) {
      $count_disjointwith = count($disjointwith_array);
      foreach ( $disjointwith_array as $disjointwith ) {
        if( !empty($disjointwith) ) {
          db_query(db_rewrite_sql('insert into {evoc_rdf_disjointwith} (prefix, reference, disjointwith) values ("%s", "%s", "%s")'), $class['prefix'], $class['id'], $disjointwith);
        }
      }
    }
    
    if( db_query(db_rewrite_sql('insert into {evoc_rdf_classes} (prefix, id, label, comment, superclasses, ndisjointwith) 
      values ("%s", "%s", "%s", "%s", "%d", "%d")'), $class['prefix'], $class['id'], $class['label'], $class['comment'], $count_superclasses, $count_disjointwith ) ) {
      if( $showdetails ) {
        drupal_set_message('Importing Class. Class <b>'.$class['prefix']." : ".$class['id']."</b> successfully imported.");
      }
    }
    else {
      drupal_set_message('Importing Class. Class <b>'.$class['prefix'].' : '.$class['id'].'</b> could not be saved.', 'warning');
    }
  }
}

/**
 * Update an external RDF class in the database.
 * 
 * @param object $class it's a keyed array containing the class information to be added. 
 *               e.g: class = array(
 *                 'id' => 'someid', 
 *                 'type' => 'class', 
 *                 'label' => 'class label', 
 *                 'comment' => 'some comment', 
 *                 'superclasses' => array('rdfs:Resource', 'sioc:Container'),
 *                 'disjointwith' => array('rdfs:Resource', 'sioc:Container'),
 *                 'previous_id' => 'some_valid_previous_id'
 *                 );  
 *          
 * @return 
 */
function evoc_update_class($class, $cascade_update = TRUE) {
  if( !isset($class['previous_id']) ) {
    drupal_set_message('Updating Class. This function need $class[\'previous_id\'] = id_to_update.', 'warning');
    return;
  } 
  
  $currentclass = db_fetch_object(db_query(db_rewrite_sql('select * from {evoc_rdf_classes} where prefix="%s" and id = "%s"'), $class['prefix'], $class['previous_id']));
  
  if( $currentclass ) {
    $previous_qname = $class['prefix'].':'.$class['previous_id'];
    $new_qname = $class['prefix'].':'.$class['id'];
    
    if( $previous_qname != $new_qname && $cascade_update ) {
      $result = db_query(db_rewrite_sql('select * from {evoc_rdf_superclasses} where superclass = "%s"'), $previous_qname);    
      // update all the subclassesof $previous_qname
      while ( $subclassof = db_fetch_object($result) ) {
        $result = db_query(db_rewrite_sql('update {evoc_rdf_superclasses} set superclass = "%s" where prefix = "%s" and reference = "%s"'), $new_qname, $subclassof->prefix, $subclassof->reference);  
      }
      
      //update disjointwith table with the new classname
    	$result = db_query(db_rewrite_sql('select * from {evoc_rdf_disjointwith} where disjointwith = "%s"'), $previous_qname);    
      // update all the subclassesof $previous_qname
      while ( $disjointwith = db_fetch_object($result) ) {
        $result = db_query(db_rewrite_sql('update {evoc_rdf_disjointwith} set disjointwith = "%s" where prefix = "%s" and reference = "%s"'), $new_qname, $disjointwith->prefix, $disjointwith->reference);  
      }
      
      // let's go to the properties
      $result = db_query(db_rewrite_sql('select * from {evoc_rdf_propertiesdomains} where rdf_domain = "%s"'), $previous_qname);    
      while ( $domainof = db_fetch_object($result) ) {
        $result = db_query(db_rewrite_sql('update {evoc_rdf_propertiesdomains} set rdf_domain = "%s" where prefix = "%s" and reference = "%s"'), $new_qname, $domainof->prefix, $domainof->reference);  
      }
      
      $result = db_query(db_rewrite_sql('select * from {evoc_rdf_propertiesranges} where rdf_range = "%s"'), $previous_qname);    
      while ( $rangeof = db_fetch_object($result) ) {
        $result = db_query(db_rewrite_sql('update {evoc_rdf_propertiesranges} set rdf_range = "%s" where prefix = "%s" and reference = "%s"'), $new_qname, $rangeof->prefix, $rangeof->reference);  
      }
    }
    
    // now it's time to update the class
    // check for superclasses
    // if has superclasses then remove them
    if( $currentclass->superclasses > 0 ) {
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superclasses} where prefix = "%s" and reference = "%s"'), $currentclass->prefix, $currentclass->id);
    }
    
    $count_superclasses = 0;
    $superclasses = $class[EVOC_SUPERCLASSES];
    if( !empty($superclasses) && is_array($superclasses) ) {
      $count_superclasses = count($superclasses);
      foreach ( $superclasses as $superclass ) {
        if( !empty($superclass) ) {
          db_query(db_rewrite_sql('insert into {evoc_rdf_superclasses} (prefix, reference, superclass) values ("%s", "%s", "%s")'), $class['prefix'], $class['id'], $superclass);
        }
      }
    }
    
  	// update disjointwith table
    if( $currentclass->disjointwith > 0 ) {
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_disjointwith} where prefix = "%s" and reference = "%s"'), $currentclass->prefix, $currentclass->id);
    }
    
    $count_disjointwith = 0;
    $disjointwith_array = $class[EVOC_DISJOINTS];
    if( !empty($disjointwith_array) && is_array($disjointwith_array) ) {
      $count_disjointwith = count($disjointwith_array);
      foreach ( $disjointwith_array as $disjointwith ) {
        if( !empty($disjointwith) ) {
          db_query(db_rewrite_sql('insert into {evoc_rdf_disjointwith} (prefix, reference, disjointwith) values ("%s", "%s", "%s")'), $class['prefix'], $class['id'], $disjointwith);
        }
      }
    }
    
    $result = db_query(db_rewrite_sql('update {evoc_rdf_classes} set id = "%s", label = "%s", comment = "%s", superclasses = "%d", ndisjointwith = "%d" where prefix = "%s" and id = "%s"'), 
      $class['id'], $class['label'], $class['comment'], $count_superclasses, $count_disjointwith, $currentclass->prefix, $currentclass->id);
      
    if( $result ) {  
      drupal_set_message('Updating Class. The class '.$new_qname.' was successfully updated.');          
    }
    else {
      drupal_set_message('Updating Class. The class '.$previous_qname.' could not be updated.', 'warning');
    }
    
  }
  else {
    drupal_set_message("Updating Class. Class ".$class['prefix']." : ".$class['previous_id']." not found.", 'warning');
  }
  
}


/**
 * Remove class term form evoc's repository
 * @param object $class it's a keyed array containing the class information to be removed.
 * @return 
 */
function evoc_remove_class($class, $remove_references = FALSE) {
  if( empty($class['prefix']) || empty($class['id']) )
  {
    drupal_set_message("Removing Class. Impossible remove a class without prefix and id.", 'warning');  
  }
  else {
    $current_class = db_fetch_object(db_query(db_rewrite_sql('select superclasses, ndisjointwith from {evoc_rdf_classes} where prefix="%s" and id = "%s"'), $class['prefix'], $class['id']));  
    
    if( $current_class ) {
      // if has_superclass property is not provided query for it. Then remove all the dependences if there is someone
      if( $current_class->superclasses > 0 ) {
        $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superclasses} where prefix="%s" and reference = "%s"'), $class['prefix'], $class['id']);
        if( $result ) {
          drupal_set_message('Removing Class. Superclasses dependences for '.$class['prefix'].':'.$class['id'].' has been successfully removed.');
        }
        else {
          drupal_set_message('Removing Class. There is some error when trying to remove superclasses dependences for '.$class['prefix'].':'.$class['id'].'.', 'warning');
        }
      }
    	  
    	if( $current_class->ndisjointwith > 0 ) {
        $result = db_query(db_rewrite_sql('delete from {evoc_rdf_disjointwith} where prefix="%s" and reference = "%s"'), $class['prefix'], $class['id']);
        if( $result ) {
          drupal_set_message('Removing Class. Disjointwith dependences for '.$class['prefix'].':'.$class['id'].' has been successfully removed.');
        }
        else {
          drupal_set_message('Removing Class. There is some error when trying to remove disjointwith dependences for '.$class['prefix'].':'.$class['id'].'.', 'warning');
        }
      }
      
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_classes} where prefix="%s" and id = "%s"'), $class['prefix'], $class['id']);
      if( $result ) {
        drupal_set_message('Removing Class. Class '.$class['prefix'].':'.$class['id']." has been successfully removed from the system.");
      }
      else {
        drupal_set_message('Removing Class. Class '.$class['prefix'].':'.$class['id'].' not found in the system.', 'warning');
      }
      
      // should I remove all the domains and ranges belonging to this class?
      // TODO if I do, add that behaviour here
      if ( $remove_references ) {
        $qname = $class['prefix'].':'.$class['id']; 
        
        // remove subclass dependence
        $result = db_query(db_rewrite_sql('select prefix, reference from {evoc_rdf_superclasses} where superclass = "%s"'), $qname);
        while ( $subclass = db_fetch_object($result) ) {
          $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superclasses} where prefix = "%s" and reference = "%s"'), $subclass->prefix, $subclass->reference);
          if ( $result ) {
            $cd = db_fetch_object(db_query(db_rewrite_sql('select superclasses from {evoc_rdf_classes} where prefix = "%s" and id = "%s"'), $subclass->prefix, $subclass->reference));
            $result = db_query(db_rewrite_sql('update {evoc_rdf_classes} set superclasses = "%d" where prefix = "%s" and id = "%s"'), --$cd->superclasses, $subclass->prefix, $subclass->reference);
          }
        }
        
        // removing domains references for properties
        $result = db_query(db_rewrite_sql('select prefix, reference from {evoc_rdf_propertiesdomains} where rdf_domain = "%s"'), $qname);
        while ( $property = db_fetch_object($result) ) {
          $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesdomains} where prefix = "%s" and reference = "%s"'), $property->prefix, $property->reference);
          if ( $result ) {
            $pd = db_fetch_object(db_query(db_rewrite_sql('select domains from {evoc_rdf_properties} where prefix = "%s" and id = "%s"'), $property->prefix, $property->reference));
            $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set domains = "%d" where prefix = "%s" and id = "%s"'), --$pd->domains, $property->prefix, $property->reference);
          }
        }
        
        // removing ranges references for properties
        $result = db_query(db_rewrite_sql('select prefix, reference from {evoc_rdf_propertiesranges} where rdf_range = "%s"'), $qname);
        while ( $property = db_fetch_object($result) ) {
          $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesranges} where prefix = "%s" and reference = "%s"'), $property->prefix, $property->reference);
          if ( $result ) {
            $pr = db_fetch_object(db_query(db_rewrite_sql('select ranges from {evoc_rdf_properties} where prefix = "%s" and id = "%s"'), $property->prefix, $property->reference));
            $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set ranges = "%d" where prefix = "%s" and id = "%s"'), --$pr->ranges, $property->prefix, $property->reference);
          }
        }
      } // $remove_references 
    }
           
  }
}

/**
 * Store an external RDF property in the database.
 * @param object $property / $term = array();
 *         $term['id'] = string
 *         $term['label'] = string
 *         $term['comment'] = string
 *         $term['domains'] = array();
 *         $term['ranges'] = array();
 *         $term['superproperties'] = array();
 *         $term['prefix'] = string
 *         $term['inverse'] = string/qname
 * 
 * 
 * @return none 
 */
function evoc_write_property($property, $showdetails = false) {
  $count = db_result(db_query(db_rewrite_sql('SELECT count(*) FROM {evoc_rdf_properties} WHERE prefix="%s" AND id = "%s"'), $property['prefix'], $property['id'])) > 0;
  if ($count) {
    drupal_set_message('Importing Property. Property '.$property['prefix']." : ".$property['id']." already exists in the system.", 'status', FALSE);
  }
  else {
    $count_domains = 0;
    $domains = $property[EVOC_DOMAINS];
    if( !empty($domains) && is_array($domains) ) {
      $count_domains = count($domains);
      foreach ( $domains as $rdf_domain ) {
        db_query(db_rewrite_sql('insert into {evoc_rdf_propertiesdomains} (prefix, reference, rdf_domain) values ("%s", "%s", "%s")'), $property['prefix'], $property['id'], $rdf_domain);
      }
    }
    
    $count_ranges = 0;
    $ranges = $property[EVOC_RANGES];
    if( !empty($ranges) && is_array($ranges) ) {
      $count_ranges = count($ranges);
      foreach ( $ranges as $rdf_range ) {
        db_query(db_rewrite_sql('insert into {evoc_rdf_propertiesranges} (prefix, reference, rdf_range) values ("%s", "%s", "%s")'), $property['prefix'], $property['id'], $rdf_range);
      }
    }
    
    $count_superproperties = 0;
    $superproperties = $property[EVOC_SUPERPROPERTIES];
    if( !empty($superproperties) && is_array($superproperties) ) {
      $count_superproperties = count($superproperties);
      foreach ( $superproperties as $superproperty ) {
        db_query(db_rewrite_sql('insert into {evoc_rdf_superproperties} (prefix, reference, superproperty) values ("%s", "%s", "%s")'), $property['prefix'], $property['id'], $superproperty);
      }
    }
    
    if( db_query(db_rewrite_sql('insert into {evoc_rdf_properties} (prefix, id, label, comment, superproperties, domains, ranges, inverseof) 
      values ("%s", "%s", "%s", "%s", "%d", "%d", "%d", "%s")'), 
      $property['prefix'], $property['id'], $property['label'], $property['comment'], $count_superproperties, $count_domains, $count_ranges, $property[EVOC_INVERSE]) ) {
      if( $showdetails ) {
        drupal_set_message('Importing Property. Property <b>'.$property['prefix'].' : '.$property['id'].'</b> successfully imported.');
      }
    }
    else {
      drupal_set_message('Importing Property. Property <b>'.$property['prefix'].' : '.$property['id'].'</b> could not be saved.', 'warning');
    }
  }
}

/**
 * Update an external RDF class in the database.
 * 
 * @param object $property / $term it's a keyed array containing the class information to be added. 
 *                 $property['id'] = string
 *                 $property['type'] = string
 *                 $property['label'] = string
 *         $property['comment'] = string
 *         $property['rdf_domain'] = array();
 *         $property['rdf_range'] = array();
 *         $property['subpropertyof'] = array();
 *         $property['inverseof'] = string
 *         $property['prefix'] = string 
 *         $property['previous_id'] = 'some_valid_previous_id'
 *                   
 *          
 * @return 
 */
function evoc_update_property($property, $cascade_update = TRUE) {
  if( !isset($property['previous_id']) ) {
    drupal_set_message('Updating Property. This function need $property[\'previous_id\'] = id_to_update. to update '.$property['prefix'].':'.$property['id'], 'warning');
    return;
  } 
  
  $currentproperty = db_fetch_object(db_query(db_rewrite_sql('select * from {evoc_rdf_properties} where prefix="%s" and id = "%s"'), $property['prefix'], $property['previous_id']));
  
  if( $currentproperty ) {
    $previous_qname = $property['prefix'].':'.$property['previous_id'];
    $new_qname = $property['prefix'].':'.$property['id'];
    
    if( $previous_qname != $new_qname && $cascade_update ) {
      $result = db_query(db_rewrite_sql('select * from {evoc_rdf_superproperties} where superproperty = "%s"'), $previous_qname);    
      // update all the subclassesof $previous_qname
      while ( $subpropertyof = db_fetch_object($result) ) {
        $result = db_query(db_rewrite_sql('update {evoc_rdf_superproperties} set superproperty = "%s" where prefix = "%s" and reference = "%s"'), $new_qname, $subclassof->prefix, $subpropertyof->reference);  
      }
      
      // update the inverseof dependencies for the new property name
      $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set inverseof = "%s" where inverseof = "%s"'), $new_qname, $previous_qname);
    }
    
    // now it's time to update the property
    // check for rdf_domains, if has domains then remove them
    if( $currentproperty->domains > 0 ) {
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesdomains} where prefix = "%s" and reference = "%s"'), $currentproperty->prefix, $currentproperty->id);
    }
    $count_domains = 0;
    $domains = $property[EVOC_DOMAINS];
    if( !empty($domains) && is_array($domains) ) {
      $count_domains = count($domains);
      foreach ( $domains as $rdf_domain ) {
        db_query(db_rewrite_sql('insert into {evoc_rdf_propertiesdomains} (prefix, reference, rdf_domain) values ("%s", "%s", "%s")'), $property['prefix'], $property['id'], $rdf_domain);
      }
    }
    
    // check for rdf_ranges, if has domains then remove them
    if( $currentproperty->ranges > 0 ) {
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesranges} where prefix = "%s" and reference = "%s"'), $currentproperty->prefix, $currentproperty->id);
    }
    $count_ranges = 0;
    $ranges = $property[EVOC_RANGES];
    if( !empty($ranges) && is_array($ranges) ) {
      $count_ranges = count($ranges);
      foreach ( $ranges as $rdf_range ) {
        db_query(db_rewrite_sql('insert into {evoc_rdf_propertiesranges} (prefix, reference, rdf_range) values ("%s", "%s", "%s")'), $property['prefix'], $property['id'], $rdf_range);
      }
    }
    
    // check for superproperties, if does then remove them
    if( $currentproperty->superproperties > 0 ) {
      $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superproperties} where prefix = "%s" and reference = "%s"'), $currentproperty->prefix, $currentproperty->id);
    }
    $count_superproperties = 0;
    $superproperties = $property[EVOC_SUPERPROPERTIES];
    if( !empty($superproperties) && is_array($superproperties) ) {
      $count_superproperties = count($superproperties);
      foreach ( $superproperties as $superproperty ) {
        db_query(db_rewrite_sql('insert into {evoc_rdf_superproperties} (prefix, reference, superproperty) values ("%s", "%s", "%s")'), $property['prefix'], $property['id'], $superproperty);
      }
    }
        
    // update the property
    $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set id = "%s", label = "%s", comment = "%s", superproperties = "%d", domains = "%d", ranges = "%d", inverseof = "%s" where prefix = "%s" and id = "%s"'), 
      $property['id'], $property['label'], $property['comment'], $count_superproperties, $count_domains, $count_ranges, $property[EVOC_INVERSE], $currentproperty->prefix, $currentproperty->id);
      
    if( $result ) {  
      drupal_set_message("The property ".$new_qname." was successfully updated.");          
    }
    else {
      drupal_set_message($previous_qname." could not be updated.", 'warning');
    }
    
  }
  else {
    drupal_set_message("Updating Property. Property ".$property['prefix']." : ".$property['previous_id']." not found.", 'warning');
  }
  
}

/**
 * Remove property term form evoc's repository
 * @param object $property
 * @return 
 */
function evoc_remove_property($property) {
  if( empty($property['prefix']) || empty($property['id']) )
  {
    drupal_set_message("Impossible remove a class without prefix and id.", 'warning');  
  }
  else {
    $currentproperty = db_fetch_object(db_query(db_rewrite_sql('select * from {evoc_rdf_properties} 
      where prefix="%s" and id = "%s"'), $property['prefix'], $property['id']));  
    
    if( $currentproperty ) {
      if( $currentproperty->superproperties > 0 ) {
        $result = db_query(db_rewrite_sql('delete from {evoc_rdf_superproperties} where prefix="%s" and reference = "%s"'), $currentproperty->prefix, $currentproperty->id);
        if( $result ) {
          drupal_set_message("Superproperties dependences has been successfully removed successfully.");
        }
        else {
          drupal_set_message("There is some error when trying to remove superproperties dependences.", 'warning');
        }
      }
      
      if( $currentproperty->domains > 0 ) {
        $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesdomains} where prefix="%s" and reference = "%s"'), $currentproperty->prefix, $currentproperty->id);
        if( $result ) {
          drupal_set_message("Domain dependences has been successfully removed successfully.");
        }
        else {
          drupal_set_message("There is some error when trying to remove domain dependences.", 'warning');
        }
      }
      
      if( $currentproperty->ranges > 0 ) {
        $result = db_query(db_rewrite_sql('delete from {evoc_rdf_propertiesranges} where prefix="%s" and reference = "%s"'), $currentproperty->prefix, $currentproperty->id);
        if( $result ) {
          drupal_set_message("Range dependences has been successfully removed successfully.");
        }
        else {
          drupal_set_message("There is some error when trying to remove range dependences.", 'warning');
        }
      }
    }
    
  	// update all posibles properties that are related with this property as inverseof
  	$qname = $property['prefix'].':'.$property['id'];
    $result = db_query(db_rewrite_sql('update {evoc_rdf_properties} set inverseof = NULL where inverseof = "%s"'), $qname);
    
    $result = db_query(db_rewrite_sql('delete from {evoc_rdf_properties} where prefix="%s" and id = "%s"'), $currentproperty->prefix, $currentproperty->id);
    if( $result ) {
      drupal_set_message($qname." has been successfully removed from the system.");
    }
    else {
      drupal_set_message($qname." not found in the system.", 'warning');
    }
  }
}


/**
 * Search for an existing term in the database
 * 
 * @param object $term a keyed array containing the pair prefix and id.
 * @param object $string_term [optional] if $term is NULL then the full string term goes in $string_term.
 * @param object $class_term [optional] if TRUE the search take place in the classes repository 
 * otherwise the search take place in the properties repository. 
 * @return TRUE whether the term exists and FALSE in otherwise 
 */
function evoc_term_exists($term, $string_term, $class_term = TRUE) {
  $table = $class_term ? "evoc_rdf_classes" : "evoc_rdf_properties";
  
  if( !$term ) {
    if( ($pos = strpos($string_term, ":")) > 0 ) {
      $prefix = substr($string_term, 0, $pos);
      $id = substr($string_term, $pos + 1, strlen($string_term) );
      $term = array('prefix' => $prefix, 'id' => $id);
    }
    else {
      $term = array('prefix' => NULL, 'id' => $string_term);
    }
  }

  $count = db_result( db_query( db_rewrite_sql('SELECT count(*) FROM {%s} WHERE prefix="%s" AND id = "%s"'), $table, $term['prefix'], $term['id'] ));
  return $count > 0;  
}
