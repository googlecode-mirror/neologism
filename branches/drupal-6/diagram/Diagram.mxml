<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="absolute" 
				xmlns:oh="com.roguedevelopment.objecthandles.*"
				creationComplete="init()" 
				xmlns:popupbar="com.roguedevelopment.popupbar.*" 
				xmlns:vdisplay="vis.vocabulary.display.*" 
				xmlns:core="com.ak33m.rpc.core.*" xmlns:xmlrpc="com.ak33m.rpc.xmlrpc.*" borderColor="#FFFFFF" borderVisible="false" backgroundColor="#FFFFFF">
	
	<mx:Script>
		<![CDATA[
			import com.roguedevelopment.objecthandles.*;
			
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.utils.URLUtil;
			
			import vis.vocabulary.display.*;
			
			private var selectionManager:SelectionManager = SelectionManager.instance;
			
			private var host:String;
			private var _urlVocab:String;
			private var _urlLayout:String;
			private var _urlLayoutWrite:String;
			private var _urlDiagramWrite:String;
			
			private var aboutDialog:AboutDialog;
			private var configDialog:ConfigDialog;
			
			private var _editLayout:Boolean = false;
			private var _showProperties:Boolean = true;
			private var _editableArcs:Boolean = false;
			private var _editableProperties:Boolean = false;
			private var _showGrid:Boolean = false;
			// flashvars
			[Bindable]
			public var vocabulary:String;
			
			[Bindable]
			public var prefix:String;
			
			[Bindable]
			public var editMode:Boolean;
			
			[Bindable]
			public var token:String;
			
			protected function init() : void
			{
				// setup the flashvars params
				if (FlexGlobals.topLevelApplication.parameters.vocabulary != undefined) {
					vocabulary = FlexGlobals.topLevelApplication.parameters.vocabulary;
					//Application.application.parameters.vocabulary;
				}
				else { 
					vocabulary = '';
				}
				
				if (FlexGlobals.topLevelApplication.parameters.prefix != undefined) {
					prefix = FlexGlobals.topLevelApplication.parameters.prefix;
				}
				else { 
					prefix = '';
				}
				
				if (FlexGlobals.topLevelApplication.parameters.editMode != undefined) {
					editMode = Boolean(FlexGlobals.topLevelApplication.parameters.editMode);
				}
				else { 
					editMode = false;
				}
				
				if (FlexGlobals.topLevelApplication.parameters.token != undefined) {
					token = FlexGlobals.topLevelApplication.parameters.token;
				}
				else {// no security token
					token = '';
				}
				
				host = URLUtil.getServerNameWithPort(FlexGlobals.topLevelApplication.url);
				if (host == '') {
					_urlVocab = 'vocabulary.xml';
					_urlLayout = 'layout.xml';
					
					_urlDiagramWrite = '';
					_urlLayoutWrite = '';
				} else {
					//trace(prefix);
					_urlVocab = URLUtil.getFullURL(host, prefix + vocabulary + '.xml');
					_urlLayout = URLUtil.getFullURL(host, prefix + vocabulary + '.layout');
					//_urlDiagramWrite = URLUtil.getFullURL(host, prefix + vocabulary + '/image');
					_urlLayoutWrite = URLUtil.getFullURL(host, prefix + vocabulary + '.layout');
				}

				// for testing just select the url where is hosted some vocabulary with Neologism
				// and add the .xml and .layout to _urlVocab and to _urlLayout respectively 
				//var url:String = 'http://localhost/neo/dady';
				//_urlVocab = url + '.xml';
				//_urlLayout = url + '.layout';
				//editMode = true;
				//token = '';
				
				this.addEventListener(VocabularyCanvas.VOCABULARY_READY, onVocabularyReady);
				
				this.vocabularyPanel.layoutURL = _urlLayout;
				this.vocabularyPanel.vocabularyURL = _urlVocab;
				this.vocabularyPanel.loadVocabulary();
				this.vocabularyPanel.addEventListener(MouseEvent.CLICK, onMouseClickHandler);
			}
			
			private function onMouseClickHandler(event:MouseEvent) : void
			{
				//this.selectionManager.selectNone();
			}
			
			public function enableSection(enable:Boolean) : void
			{ 
				var array:Array = selectionManager.getItems(); 
				for each(var nodeHandler:RDFObjectHandles in selectionManager.getItems()) {
					nodeHandler.enableSelection = enable;
					nodeHandler.deselect();
				}
			}
			
			private function onZoom() : void
			{
				this.vocabularyPanel.scaleX = this.zoom.value;
				this.vocabularyPanel.scaleY = this.zoom.value;
			}
			
			private function changeGrid() : void
			{
				// commented because the component was disabled
				//this.vocabularyPanel.gridSpacing = this.gridSize.value;
			}
			
			private function onSavelayout() : void
			{
				sendLayout();
			}
			
			public function imgToByteArray( bmpImg : BitmapData ) : ByteArray
			{
				var binaryImage : ByteArray = new ByteArray();
				var bmpWidth:Number;
				var bmpHeight:Number;
				bmpWidth = bmpImg.width;
				bmpHeight = bmpImg.height;
				
				for( var i:uint=0; i< bmpWidth; i++ )
				{
					for( var j:uint=0; j<bmpHeight; j++ )
					{
						binaryImage.writeUnsignedInt( bmpImg.getPixel( i, j ) );
					}
				}
				return binaryImage;
			}
			
			public function sendLayout() : void
			{
				var request:URLRequest = new URLRequest(_urlLayoutWrite);
				request.method = URLRequestMethod.POST;
				var variables:URLVariables = new URLVariables();
				variables.layout = vocabularyPanel.vocabularyLayout;
				variables.token = token;
				request.data = variables;
				sendToURL(request);
			}
			
			public function sendImage() : void
			{
				var request:URLRequest = new URLRequest(_urlDiagramWrite);
				request.method = URLRequestMethod.POST;
				var variables:URLVariables = new URLVariables();
				variables.image = imgToByteArray(vocabularyPanel.vocabularyBitmap);
				variables.token = token;
				request.data = variables;
				sendToURL(request);
			}
			
			public function about() : void
			{
				//var aboutDialog:AboutDialog = AboutDialog(PopUpManager.createPopUp( this, AboutDialog, true));
				aboutDialog = PopUpManager.createPopUp(this, AboutDialog, true) as AboutDialog;
				PopUpManager.centerPopUp(aboutDialog);
				
				//Alert.show('Thank you for using the Neologism Simple Vocbulary Visualizer. \n Cosmin Basca (c) March 2008, \n cosmin.basca@deri.org \n www.deri.ie','About NeoSViz v1.3',Alert.OK, this, null, IconInfo, Alert.OK);
			}
			
			public function showConfigDialog():void {
				configDialog = PopUpManager.createPopUp(this, ConfigDialog, true) as ConfigDialog;
				PopUpManager.centerPopUp(configDialog);            
			}
			
			public function get editLayout():Boolean {
				return this._editLayout;
			}
			
			public function set editLayout(value:Boolean):void {
				this._editLayout = value;
			}
			
			public function get showProperties():Boolean {
				return this._showProperties
			}
			
			public function set showProperties(value:Boolean):void {
				this._showProperties = value;
			}
			
			public function get editableArcs():Boolean {
				return this._editableArcs
			}
			
			public function set editableArcs(value:Boolean):void {
				this._editableArcs = value;
			}
			
			public function get editableProperties():Boolean {
				return this._editableProperties
			}
			
			public function set editableProperties(value:Boolean):void {
				this._editableProperties = value;
			}
			
			public function get showGrid():Boolean {
				return this._showGrid;
			}
			
			public function set showGrid(value:Boolean):void {
				this._showGrid = vocabularyPanel.showGrid = value;
			}
			
			private function onVocabularyReady(event:Event):void {
				event.stopImmediatePropagation();
				
				this.applicationControlBar.visible = editMode;
				this.applicationControlBar.height = editMode ? 30 : 0;
				vocabularyPanel.showGrid = _showGrid;
				
				enableSection(editMode);
				for each(var rdfArc:RDFArc in vocabularyPanel.arcs) {
					rdfArc.editMode = editMode;
				}
				
				this.removeEventListener(VocabularyCanvas.VOCABULARY_READY, onVocabularyReady);
			} 
		]]>
	</mx:Script>
	
	<mx:ApplicationControlBar dock="true" id="applicationControlBar">
		<mx:Label text="Zoom:" height="100%"/>
		<mx:HSlider height="100%" 
					minimum="0.5" 
					maximum="1.5" 
					enabled="true" 
					id="zoom" 
					allowTrackClick="false" 
					snapInterval="0.1" 
					change="onZoom()" 
					liveDragging="true" value="1"/>
		
		<!--
		<mx:Label text="Grid Size" height="100%"/>
		<mx:HSlider height="100%" 
		minimum="5" 
		maximum="45" 
		
		snapInterval="2" 
		id="gridSize"
		liveDragging="true"
		change="changeGrid()"/>
		-->
		
		<mx:Button label="Config" click="showConfigDialog()"/>
		<mx:Button id="saveLayout" label="Save Layout"
				   click="onSavelayout()"
				   visible="true"
				   />
		<mx:Button label="About" click="about()"/>
	</mx:ApplicationControlBar>
	
	<mx:Panel width="100%" height="100%" layout="absolute" x="0" y="0" verticalScrollPolicy="auto" horizontalScrollPolicy="auto" includeInLayout="false" headerHeight="0">
		<vdisplay:VocabularyCanvas x="0" y="0" id="vocabularyPanel" backgroundColor="0xffffff" backgroundAlpha="1" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderStyle="none" borderThickness="0" borderVisible="false">
		</vdisplay:VocabularyCanvas>
	</mx:Panel>
</mx:Application>
