<?php
// $Id$

/**
 * @file
 * Defines simple linkuri field types.
 */

/**
 * Implementation of hook_theme().
 */
function linkuri_theme() {
  return array(
    'linkuri_textarea' => array(
      'arguments' => array('element' => NULL),
    ),
    'linkuri_textfield' => array(
      'arguments' => array('element' => NULL),
    ),
    'linkuri_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'linkuri' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function linkuri_field_info() {
  return array(
    'linkuri' => array(
      'label' => t('Link URI'),
      'description' => t('Store URIs in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function linkuri_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $options = array(0 => t('Plain text'), 1 => t('Filtered text (user selects input format)'));
//       $form['text_processing'] = array(
//         '#type' => 'radios',
//         '#title' => t('Text processing'),
//         '#default_value' => is_numeric($field['text_processing']) ? $field['text_processing'] : 0,
//         '#options' => $options,
//       );
      $form['sparql_query'] = array(
        '#type' => 'textarea',
        '#title' => t('SPARQL query'),
        '#default_value' => $field['sparql_query'],
        '#required' => TRUE,
        '#description' => t('SPARQL query to use to fetch suggested URIs.'),
      );
      $form['sparql_endpoint'] = array(
        '#type' => 'textfield',
        '#title' => t('SPARQL endpoint'),
        '#default_value' => $field['sparql_endpoint'],
        '#required' => TRUE,
        '#description' => t('SPARQL endpoint against which the query above will be sent.'),
      );
//       $form['allowed_values_fieldset'] = array(
//         '#type' => 'fieldset',
//         '#title' => t('Allowed values'),
//         '#collapsible' => TRUE,
//         '#collapsed' => TRUE,
//       );
//       $form['allowed_values_fieldset']['allowed_values'] = array(
//         '#type' => 'textarea',
//         '#title' => t('Allowed values list'),
//         '#default_value' => !empty($field['allowed_values']) ? $field['allowed_values'] : '',
//         '#required' => FALSE,
//         '#rows' => 10,
//         '#description' => t('The possible values this field can contain. Enter one value per line, in the format key|label. The key is the value that will be stored in the database, and it must match the field storage type (%type). The label is optional, and the key will be used as the label if no label is specified.<br />Allowed HTML tags: @tags', array('%type' => $field['type'], '@tags' => _content_filter_xss_display_allowed_tags())),
//       );
//       $form['allowed_values_fieldset']['advanced_options'] = array(
//         '#type' => 'fieldset',
//         '#title' => t('PHP code'),
//         '#collapsible' => TRUE,
//         '#collapsed' => empty($field['allowed_values_php']),
//       );
      return $form;

    case 'save':
      return array('sparql_query', 'sparql_endpoint');

    case 'database columns':
      return array(
        'uri' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => TRUE),
      );
  }
}

/**
 * Implementation of hook_field().
 */
function linkuri_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
//       $allowed_values = content_allowed_values($field);
//       if (is_array($items)) {
//         foreach ($items as $delta => $item) {
//           $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
//           if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
//           if (!empty($item['value'])) {
//             if (count($allowed_values) && !array_key_exists($item['value'], $allowed_values)) {
//               form_set_error($error_element, t('%name: illegal value.', array('%name' => t($field['widget']['label']))));
//             }
//             if (!empty($field['max_length']) && drupal_strlen($item['value']) > $field['max_length']) {
//               form_set_error($error_element, t('%name: the value may not be longer than %max characters.', array('%name' => $field['widget']['label'], '%max' => $field['max_length'])));
//             }
//           }
//         }
//       }
//       return $items;

    case 'sanitize':
//       foreach ($items as $delta => $item) {
//         if (!empty($field['text_processing'])) {
//           $check = is_null($node) || (isset($node->build_mode) && $node->build_mode == NODE_BUILD_PREVIEW);
//           $text = isset($item['value']) ? check_markup($item['value'], $item['format'], $check) : '';
//         }
//         else {
//           $text = check_plain($item['value']);
//         }
//         $items[$delta]['safe'] = $text;
//       }
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function linkuri_content_is_empty($item, $field) {
  if (empty($item['uri'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
// How the linkuri will be displayed.
function linkuri_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('linkuri'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' linkuri field formatter.
 */
function theme_linkuri_formatter_default($element) {
  return empty($element['#item']['uri']) ? '' : check_plain($element['#item']['uri']);
}


// function _linkuri_allowed_values($element) {
//   $field = content_fields($element['#field_name'], $element['#type_name']);
//   if (($allowed_values = content_allowed_values($field)) && isset($allowed_values[$element['#item']['value']])) {
//     return $allowed_values[$element['#item']['value']];
//   }
// }

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function linkuri_widget_info() {
  return array(
    'linkuri_textfield' => array(
      'label' => t('linkuri Text field'),
      'field types' => array('linkuri'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'linkuri_textarea' => array(
      'label' => t('linkuri Text area (multiple rows)'),
      'field types' => array('linkuri'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by linkuri_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function linkuri_elements() {
  return array(
    'linkuri_textfield' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('linkuri_textfield_process'),
      '#autocomplete_path' => FALSE,
    ),
    'linkuri_textarea' => array(
      '#input' => TRUE,
      '#columns' => array('value', 'format'), '#delta' => 0,
      '#process' => array('linkuri_textarea_process'),
      '#filter_value' => FILTER_FORMAT_DEFAULT,
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
// function linkuri_widget_settings($op, $widget) {
//   switch ($op) {
//     case 'form':
//       $form = array();
//       $rows = (isset($widget['rows']) && is_numeric($widget['rows'])) ? $widget['rows'] : 5;
//       $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
//       if ($widget['type'] == 'linkuri_textfield') {
//         $form['rows'] = array('#type' => 'hidden', '#value' => $rows);
//         $form['size'] = array(
//           '#type' => 'textfield',
//           '#title' => t('Size of textfield'),
//           '#default_value' => $size,
//           '#element_validate' => array('_linkuri_widget_settings_size_validate'),
//           '#required' => TRUE,
//         );
//       }
//       else {
//         $form['rows'] = array(
//           '#type' => 'textfield',
//           '#title' => t('Rows'),
//           '#default_value' => $rows,
//           '#element_validate' => array('_linkuri_widget_settings_row_validate'),
//           '#required' => TRUE,
//         );
//         $form['size'] = array('#type' => 'hidden', '#value' => $size);
//       }
//       return $form;
// 
//     case 'save':
//       return array('rows', 'size');
//   }
// }

// function _linkuri_widget_settings_row_validate($element, &$form_state) {
//   $value = $form_state['values']['rows'];
//   if (!is_numeric($value) || intval($value) != $value || $value <= 0) {
//     form_error($element, t('"Rows" must be a positive integer.'));
//   }
// }
// 
// function _linkuri_widget_settings_size_validate($element, &$form_state) {
//   $value = $form_state['values']['size'];
//   if (!is_numeric($value) || intval($value) != $value || $value <= 0) {
//     form_error($element, t('"Size" must be a positive integer.'));
//   }
// }

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function linkuri_widget(&$form, &$form_state, $field, $items, $delta = 0) {
$form['#field_info']['field_linkuri']['widget']['label'] = 'sc';
var_dump($form['#field_info']['field_linkuri']['widget']['label']);
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function linkuri_textfield_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'text'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  $element[$field_key]['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;

  if (!empty($field['text_processing'])) {
    $filter_key = $element['#columns'][1];
    $format = isset($element['#value'][$filter_key]) ? $element['#value'][$filter_key] : FILTER_FORMAT_DEFAULT;
    $parents = array_merge($element['#parents'] , array($filter_key));
    $element[$filter_key] = filter_form($format, 1, $parents);
  }

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  return $element;
}

function theme_linkuri($element) {
var_dump($element);
return $element;
}

/**
 * FAPI theme for an individual linkuri elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_linkuri_textfield($element) {
  return $element['#children'];
}

function theme_linkuri_textarea($element) {
  return $element['#children'];
}